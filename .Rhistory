cat("Usted fue bloqueado. Has superado los", max_intent, "intentos permitidos")
}
}
contra_correct <- "857412369"
intent <- 0
max_intent <- 3
contra_ingre <- ""
while(contra_ingre != contra_correct && intent < max_intent) {
intent <- intent + 1
cat("Ingresa contraseña: ")
contra_ingre <- readLines(con = stdin(), n = 1)
if(contra_ingre == contra_correct) {
cat("¡Acceso concedido!\n")
} else {
cat("Contraseña incorrecta. Intento", intent, "de", max_intent, "\n")
}
if(contra_ingre != contra_correct && intent == max_intent) {
cat("Usted fue bloqueado. Has superado los", max_intent, "intentos permitidos")
}
}
numero <- as.integer(readLines(con = stdin(), n = 1))
suma_digitos <- 0
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
suma_digitos <- 0
while(numero > 0) {
ultimo_digito <- numero %% 10
suma_digitos <- suma_digitos + ultimo_digito
numero <- numero %/% 10
}
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
suma_digitos <- 0
while(numero > 0) {
ultimo_digito <- numero %% 10
suma_digitos <- suma_digitos + ultimo_digito
numero <- numero %/% 10
}
cat("Ingresa un número entero: ")
8570
while(numero > 0) {
ultimo_digito <- numero %% 10
suma_digitos <- suma_digitos + ultimo_digito
numero <- numero %/% 10
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
numero <- as.integer(readLines(con = stdin(), n = 1))
# Inicializar una variable para almacenar el número
numero <- NA
# Bucle para asegurar que el usuario ingresa un número entero válido
while (is.na(numero)) {
# Solicitar al usuario que ingrese un número entero
cat("Ingresa un número entero: ")
entrada <- readLines(con = stdin(), n = 1)
# Intentar convertir la entrada a un número entero
numero <- as.integer(entrada)
# Verificar si la conversión fue exitosa
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
numero_original <- numero  # Guardar el número original para mostrar más tarde
# Mientras el número sea mayor que 0
while (numero > 0) {
# Obtener el último dígito (resto de dividir entre 10)
ultimo_digito <- numero %% 10
# Sumar el último dígito a la suma
suma_digitos <- suma_digitos + ultimo_digito
# Eliminar el último dígito (dividir entre 10 y tomar la parte entera)
numero <- numero %/% 10
}
# Mostrar el resultado de la suma de los dígitos
cat("La suma de los dígitos de", numero_original, "es:", suma_digitos, "\n")
numero <- NA
while (is.na(numero)) {
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
while (is.na(numero)) {
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
suma_digitos <- 0
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
numero <- NA
while (is.na(numero)) {
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
numero <- NA
while (is.na(numero)) {
cat("Ingresa un número entero: ")
numero <- as.integer(readLines(con = stdin(), n = 1))
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
numero <- NA
while (is.na(numero)) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
while (is.na(numero)) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
suma_digitos <- 0
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
while (is.na(numero)) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
numero <- NA
while (is.na(numero)) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
numero <- NA
suma_digitos <- 0
while (is.na(numero)) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
}
}
numero <- NA
suma_digitos <- 0
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
numero <- NA
suma_digitos <- 0
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- trimws(readLines(con = stdin(), n = 1))
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
suma_digitos <- 0
numero <- NA
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- readLines(con = stdin(), n = 1)
# Verificar si la entrada es un número entero
if (grepl("^[+-]?\\d+$", entrada)) {  # Verifica si la entrada es un número entero
numero <- as.integer(entrada)  # Solo se usa para la conversión
# Sumar los dígitos
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break  # Salir del bucle si el número es válido
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
numero <- NA
suma_digitos <- 0
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- readLines(con = stdin(), n = 1)
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- readLines(con = stdin(), n = 1)
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
while (TRUE) {
cat("Ingresa un número entero: ")
entrada <- readLines(con = stdin(), n = 1)
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Por favor, ingresa un número entero válido.\n")
}
}
numero <- NA
suma_digitos <- 0
while (TRUE) {
cat("Ingresa un número: ")
entrada <- readLines(con = stdin(), n = 1)
numero <- as.integer(entrada)
if (!is.na(numero)) {
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
break
} else {
cat("Ingrese un número válido.\n")
}
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
filas <- 5
for (i in 1:filas) {
for (j in 1:(filas - i)) {
cat(" ")
}
for (k in 1:(2 * i - 1)) {
cat("*")
}
cat("\n")
}
filas <- 6
for (i in 1:filas) {
for (j in 1:(filas - i)) {
cat(" ")
}
for (k in 1:(2 * i - 1)) {
cat("*")
}
cat("\n")
}
numeros <- sample(1:100, 100)
for (i in numeros) {
if (i %% 2 == 0) {
cat(i, "es par\n")
} else {
cat(i, "es impar\n")
}
}
for (num in 1:100) {
es_primo <- TRUE
if (num <= 1) {
es_primo <- FALSE
} else {
for (i in 2:(num - 1)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
}
if (es_primo) {
cat(num, "es primo\n")
} else {
cat(num, "no es primo\n")
}
}
# Iterar a través de los números del 1 al 100
for (num in 1:100) {
es_primo <- TRUE  # Asumir que el número es primo
# Verificar si el número es menor o igual a 1
if (num <= 1) {
es_primo <- FALSE
} else {
# Verificar si hay divisores
for (i in 2:(num - 1)) {
if (num %% i == 0) {
es_primo <- FALSE  # No es primo si es divisible
break  # Salir del bucle si se encuentra un divisor
}
}
}
# Imprimir el resultado
if (es_primo) {
cat(num, "es primo\n")
} else {
cat(num, "no es primo\n")
}
}
# Iterar a través de los números del 1 al 100
for (num in 1:100) {
es_primo <- TRUE  # Asumir que el número es primo
# Verificar si el número es menor o igual a 1
if (num <= 1) {
es_primo <- FALSE
} else {
# Verificar si hay divisores
for (i in 2:(num - 1)) {
if (num %% i == 0) {
es_primo <- FALSE  # No es primo si es divisible
break  # Salir del bucle si se encuentra un divisor
}
}
}
# Imprimir el resultado
if (es_primo) {
cat(num, "es primo\n")
} else {
cat(num, "no es primo\n")
}
}
for (i in 1:100) {
es_primo <- TRUE
if (i < 2) {
es_primo <- FALSE
} else {
for (j in 2:(i - 1)) {
if (i %% j == 0) {
es_primo <- FALSE
break
}
}
}
if (es_primo) {
cat(i, "es primo\n")
} else {
cat(i, "no es primo\n")
}
}
for (i in 1:100) {
es_primo <- TRUE
if (i < 2) {
es_primo <- FALSE
} else {
for (j in 2:(i - 1)) {
if (i %% j == 0) {
es_primo <- FALSE
break
}
}
}
if (es_primo) {
cat(i, "es primo\n")
} else {
cat(i, "no es primo\n")
}
}
# Iterar a través de los números del 1 al 100
for (i in 1:100) {
es_primo <- TRUE  # Suponemos que el número es primo
# Verificar si el número es menor que 2
if (i < 2) {
es_primo <- FALSE  # No es primo si es menor que 2
} else {
# Verificar si el número tiene divisores
for (j in 2:sqrt(i)) {
if (i %% j == 0) {
es_primo <- FALSE  # No es primo si se puede dividir por otro número
break  # Salir del bucle si se encuentra un divisor
}
}
}
# Imprimir el resultado
if (es_primo) {
cat(i, "es primo\n")  # Imprimir si es primo
} else {
cat(i, "no es primo\n")  # Imprimir si no es primo
}
}
for (num in 2:100) {
es_primo <- TRUE
for (i in 2:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
print(num)
}
}
for (num in 2:100) {
es_primo <- TRUE
for (i in 2:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
print(num, "es primo\n")
}
}
for (num in 2:100) {
es_primo <- TRUE
for (i in 2:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
cat(num, "es primo\n")
}
}
for (num in 1:100) {
es_primo <- TRUE
for (i in 1:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
cat(num, "es primo\n")
}
}
for (num in 1:100) {
es_primo <- TRUE
for (i in 1:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
cat(num, "es primo\n")
}
}
for (num in 2:100) {
es_primo <- TRUE
for (i in 2:sqrt(num)) {
if (num %% i == 0) {
es_primo <- FALSE
break
}
}
if (es_primo) {
cat(num, "es primo\n")
}
}
